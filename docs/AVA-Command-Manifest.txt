/===============================================\
|                                               |
|                  AVA-SH SERVER                |
|                 COMMAND MANIFEST              |
|                                               |
\===============================================/
Team F5



ABSTRACT
===============================

	|----------|-----------------|----------|----------------|----------|
	|   0x01   |   COMMAND_KEY   |   0x00   |   EXTRA_INFO   |   0x00   |
	|----------|-----------------|----------|----------------|----------|
	
	This document contains the current list of accepted COMMAND_KEY's, as well as what they cause the server to do. It also lists if the command contains anything in the optional EXTRA_INFO field, and if so, what should be included.

	
	

ILLEGAL CHARACTERS
===============================

	Illegal characters must not be used in the COMMAND_KEY or the EXTRA_INFO field.
	The list includes:
	
		|-------------------|--------------|------------------|
		|UTF-8 CHARACTER    |     NAME     |    HEX VALUE     |
		|-------------------|--------------|------------------|
		| \0                | null         | 0x00             |
		| $                 | dollar sign  | 0x24             |
		|-------------------|--------------|------------------| 
		


	
	
COMMAND MANIFEST
===============================

	COMMAND_KEY:	"shutdown"
	EXTRA_INFO:		false
	PURPOSE:		Remotely shutdown the main AVA Server
	RESPONSE:		N/A
	
		
	----------------------------
	
	COMMAND_KEY:	"ping"
	EXTRA_INFO: 	false
	PURPOSE:		Request an empty info-type packet from the server to act as a ping.
	RESPONSE:		info-type packet
		
		
	----------------------------
	
	COMMAND_KEY:	"sch p-event"
	EXTRA_INFO:		true
					Formated using JSON using UTF-8 character encoding, includes information denoting the trigger of the event (ie what time of day, and what days per week), and an array of the commands to fire upon event triger. A sample of this looks like:
					{
						"eventName" : "Make Evening Coffee"
						"trigger" : {
							"hour" : 17
							"minute" : 45
							"days" : [false, true, true, true, true, true, false]
						}
						"commands" : {
							{
								"type" : 1
								"sField1" : "ping"
								"sField2" : ""
								"source" : "null"
							}
							{
								"type" : 1
								"sField1" : "req time"
								"sField2" : ""
								"source" : "null"
							}
							{
								"type" : 1
								"sField1" : "ping"
								"sField2" : ""
								"source" : "null"
							}
						}
					}
	PURPOSE:		Schedule a new event to trigger at a certain time on certain days of the week.
					On trigger the event will wake a daemon thread and fire the commands to the server (more generally to whatever address the Scheduler is running on, on port 3010).
	RESPONSE		Empty info-type packet if event can be scheduled
					Error-type packet if error in event scheduling
	
	
	----------------------------
	
	COMMAND_KEY:	"set timer"
	EXTRA_INFO:		true
					Formated JSON using UTF-8 encoding, includes information denoting a name for the timer, and the amount of time until the Timer is triggered (in minutes)
					{
						"name" : "Take food out of oven"
						"timeUntilTrigger" : 30
					}
	PURPOSE:		Set a timer to trigger in a certain amount of minutes
	RESPONSE		N/A
	
	
	----------------------------
	
	COMMAND_KEY:	"req current weather"
	EXTRA_INFO:		false
	PURPOSE:		Request the current weather from server
	RESPONSE:		info-type packet JSON formated current weather
	
	
	----------------------------
	
	COMMAND_KEY:	"req current weather -i"
	EXTRA_INFO:		false
	PURPOSE:		Request the current weather from server, notify every registered interface
	RESPONSE:		info-type packet JSON formated current weather to every interface
	
	
	----------------------------
	
	COMMAND_KEY	:	"set location"
	EXTRA_INFO:		true
					The city and (optional) country code, encoded as UTF-8 characters Strings. Separated by comma. If there is no country code, the default is set to CN (Canada). Examples such that:
					Ottawa,CN
					OR
					Ottawa
	PURPOSE:		Change the geographical location that server gets the weather for based on city location.
	RESPONSE:		empty info-type packet if location set/query is valid
					error-type packet otherwise
	
	
	----------------------------
	COMMAND_KEY:	"req time"
	EXTRA_INFO:		false
	PURPOSE:		Request the time from the server.
	RESPONSE:		info-type packet with time as UTF-8 character String
	
	
	----------------------------
	
	COMMAND_KEY:	"req ip"
	EXTRA_INFO:		true
					UTF-8 encoded character String. The name of the module we want the IP of.
	PURPOSE:		Return the address of module registered under name String
	RESPONSE:		info-type packet with {IPv4:port} as UTF-8 character String.
					error-type packet if the module cannot be found.

	
	----------------------------
	
	COMMAND_KEY:	"req np-events"
	EXTRA_INFO:		false
	PURPOSE:		Request the all scheduled single-triggered (non-periodic events) from the server.
	RESPONSE:		info-type packet with JSON formated UTF-8 character string representing all scheduled non-periodic events
	
	
	----------------------------
	
	COMMAND_KEY:	"req p-events"
	EXTRA_INFO:		false
	PURPOSE:		Request the all scheduled multi-triggered (periodic events) from the server.
	RESPONSE:		info-type packet with JSON formated UTF-8 character string representing all scheduled periodic events
	
	
	----------------------------				
	
	COMMAND_KEY:	"del np-event"
	EXTRA_INFO:		true
					UTF-8 character string representing the event name of the event to remove.
					EXTRA_INFO field for removing a mono-triggered event with the name "Timer_1" would be (excluding quotes): "Timer 1"
	PURPOSE:		Delete a non-periodic event from the server (like removing a timer)
	RESPONSE:		blank info-type packet as acknowledgment of successful removal
					error-type packet if the event cannot be found
	
	
	----------------------------
	
	COMMAND_KEY:	"del p-event"
	EXTRA_INFO:		true
					UTF-8 character string representing the event name of the event to remove.
					EXTRA_INFO field for removing a periodic event with the name "Alarm 1" would be (excluding quotes): "Alarm 1"
	PURPOSE:		Delete a non-periodic event from the server (like removing an alarm)
	RESPONSE:		blank info-type packet as acknowledgment of successful removal
					error-type packet if the event cannot be found
	
	
	----------------------------
	
	COMMAND_KEY:	"details np-event"
	EXTRA_INFO:		true
					UTF-8 character string representing the event name of the event to examine.
					EXTRA_INFO field for examining a mono-triggered event with the name "Timer_1" would be (excluding quotes): "Timer_1"
	PURPOSE:		Fetch details on non-periodic event
	RESPONSE:		info packet with JSON representation of event
					error-type packet if the event cannot be found
	
	
	----------------------------
	
	COMMAND_KEY:	"details p-event"
	EXTRA_INFO:		true
					UTF-8 character string representing the event name of the event to examine.
					EXTRA_INFO field for examining a periodic event with the name "Alarm 1" would be (excluding quotes): "Alarm 1"
	PURPOSE:		Fetch details on periodic event
	RESPONSE:		info packet with JSON representation of event
					error-type packet if the event cannot be found
	
	
	----------------------------
	COMMAND_KEY:	"led on"
	EXTRA_INFO:		false
	PURPOSE:		remote turn on of LED to full.
	RESPONSE:		false
	
	
	----------------------------
	COMMAND_KEY:	"led off"
	EXTRA_INFO:		false
	PURPOSE:		remote turn off led.
	RESPONSE:		false
	
	
	----------------------------
	COMMAND_KEY:	"led pwm"
	EXTRA_INFO:		true
					Time in seconds from led off to on. Encoded as a UTF-8 character string.
					An example of having a period of 1234 seconds would be the UTF-8 characters:
					1234
	PURPOSE:		led slowly brightening
	RESPONSE:		false
	
	
	----------------------------
	COMMAND_KEY:	"alarm on"
	EXTRA_INFO:		false
	PURPOSE:		sound alarm.
	RESPONSE:		false
	
	
	----------------------------
	
	COMMAND_KEY:	"coffee on"
	EXTRA_INFO:		false
	PURPOSE:		turn ON coffee maker.
	RESPONSE:		false
	
	
	----------------------------
	
	COMMAND_KEY:	"coffee off"
	EXTRA_INFO:		false
	PURPOSE:		turn OFF coffee maker.
	RESPONSE:		false
	
	
	----------------------------

					
